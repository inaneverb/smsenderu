// Copyright Â© 2020. All rights reserved.
// Author: Ilya Stroy.
// Contacts: qioalice@gmail.com, https://github.com/qioalice
// License: https://opensource.org/licenses/MIT

package smsenderu

import (
	"github.com/shopspring/decimal"
	"time"

	"github.com/qioalice/ekago/v2/ekatime"
)

type (
	// SendMessageRequest represents a request to the provider's API about
	// sending a message.
	//
	// WARNING!
	// Some fields may not be supported by specified API provider.
	// Read the provider's docs.
	SendMessageRequest struct {

//=============================== Required fields ===============================//

		// Recipient or Recipients is the phone number(s)
		// you want to send message(s) to.
		//
		// If Recipient is presented, only one message will be sent
		// to the phone number specified in that field.
		// Otherwise, Recipients is used as an array of phone numbers.
		Recipient string
		Recipients []string

		// Message is the message you want to send to the user(s).
		// Must be UTF-8 encoded.
		Message string

		// From is a sender. A name that is shown to user when their receive
		// a message.
		//
		// WARNING!
		// API PROVIDERS REQUIRE TO PASS THEIR PROCESS OF REGISTRATION SENDERS
		// USING JURISTIC ORGANIZATION DOCUMENTS AND COVER DATA (NOTES)
		// THAT WILL BE USED BY CELLULAR OPERATORS TO ISSUE A SENDER TO YOU.
		// Read the provider's docs.
		//
		// For some providers it's not required field, and they provide you
		// a "default" sender that is used if From is not presented.
		From string

//============================== Additional fields ==============================//

		// ID is an unique message's id, set by API user that allows to use
		// a custom id instead of autogenerated by API"s one.
		//
		// WARNING!
		// May not be supported by specified API provider.
		// Read the provider's docs.
		ID string

		// UserIP is an IP of user that must be used as a message's recipient.
		// Some API providers protects you from being spammer (and losing your money)
		// by limiting the number of sms being send associated with the same IP address
		// in specific time interval.
		//
		// WARNING!
		// May not be supported by specified API provider.
		// Read the provider's docs.
		UserIP string

		// SendAt allows you to defer the sending of message.
		// The message will be sent (NOT DELIVERED!) at the specified time.
		//
		// The value is ignored (and overwritten by 0) if less than now,
		// and it's not possible to specify a date more than 2 months from today.
		// Otherwise it's UB - fast error, service error.
		// Depends on provider's and implementation.
		//
		// WARNING!
		// May not be supported by specified API provider.
		// Read the provider's docs.
		SendAt ekatime.Timestamp

		// TTL allows you to specify a time interval in the format "up to N",
		// (N is TTL), up to which the provider (and cellular operator) will try
		// to deliver message.
		// If that time interval will pass and message still is not delivered,
		// it will be rejected and never delivered anymore.
		//
		// If specified, must be in the range [1m..24h].
		// Otherwise it's UB - fast error, service error.
		// Depends on provider's and implementation.
		//
		// WARNING!
		// May not be supported by specified API provider.
		// Read the provider's docs.
		TTL time.Duration

		EnableUserLocation bool
		DoTransliterate bool

		IsPing bool
		IsHLR bool
	}

	// SendMessageResponse is a response of the calling Sender.Send().
	//
	// Each type that implements Sender interface MUST GUARANTEE that the length
	// of embedded arrays (IDs, ErrorCodes) must be the same as the number of
	// phone numbers were used at the SendMessageRequest.
	//
	// So, if you specify 2 phone numbers in SendMessageRequest, the API sender
	// guarantees to you that a SendMessageResponse's IDs and ErrorCodes will also
	// contain 2 items each. One per phone number.
	//
	// If message has not been sent to the some phone number,
	// then its associated id (in IDs) will be an empty string, but error code from
	// ErrorCodes.
	//
	// WARNING!
	// Error codes are depended on API provider
	// and may be different for the different providers (even if they means the same).
	SendMessageResponse struct {

		IDs []string
		ErrorCodes []int
	}

	StatusMessageResponse struct {

		ID string
		ErrorCode int

		Recipient string
		Message string
		From string

		SendAt ekatime.Timestamp
		UpdatedAt ekatime.Timestamp

		Country string
		Region string
		Operator string

		// TODO: HLR fields as a separate embedded (pointer based) type
	}

	// CostSendMessageResponse is a response of the calling Sender.Cost().
	// Costs must contain a message cost per i-th phone number (an order the same
	// as SendMessageRequest's); Total must have the total cost of sending message
	// to all recipients.
	//
	// WARNING!
	// May not be supported by specified API provider.
	// Read the provider's docs.
	CostSendMessageResponse struct {

		Costs []decimal.Decimal
		Total decimal.Decimal
	}
)
